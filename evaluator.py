from typing import Union, Dict, List
from pathlib import Path
import math

class Evaluator():
    def __init__(self, path: Union[Path, str]):
        """
        Args:
            path (Union[Path, str]): the path to qrels.txt
        """
        self.q_rels: Dict[str, str] = {}
        # k: query id
        # v: annotated doc id
        with open(path, "r") as fp:
            for line in fp:
                line_sp = line.split()
                self.q_rels[str(line_sp[0])] = str(line_sp[2])
        self.max_length = 1000
        
    def evaluate(self, result: Dict[str, List[str]], debug: bool = False) -> Dict[str, float]:
        """
        Args:
            result (Dict[str, List[str]]):
                key: query id
                value: list of doc_ids which is generated by the system.
            debug (bool): if True, the evaluator will not truncate the result and use pure ranks as results.
        Returns:
            Dict[str, float]: score dictionary
        """
        eval: Dict[str, float] = {}
        for k, v in result.items():
            # k: query id
            # v: list of doc ids
            ranked = v
            if len(ranked) > self.max_length and not debug: # truncate
                ranked = ranked[:self.max_length]
            if self.q_rels[k] in ranked:
                r = ranked.index(self.q_rels[k]) + 1
                if debug:
                    eval[k] = r
                else:
                    eval[k] = 1.0 / math.log2(r+1)
            else:
                eval[k] = 0.0
        return eval

    def agg(self, result: Dict[str, List[str]]) -> float:
        ret = self.evaluate(result)
        l = list(ret.values())
        return sum(l) / len(l)